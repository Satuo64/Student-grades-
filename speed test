#include <iostream>
#include <fstream>
#include <ctime>
#include <cstdlib>
#include <vector>
#include <sstream>
#include <thread>
#include <chrono>
#include <algorithm>
#include <cctype>
#include <limits>
#include <random>
#include <set>

using namespace std;
using namespace chrono;

struct Result {
    string name;
    int totalWords;
    int correctWords;
    double wpm;
    double accuracy;
    string dateTime;
};

const vector<string> WORD_LIST = {
    "cat", "dog", "hello", "keyboard", "code",
    "cpp", "typing", "speed", "system", "mouse",
    "window", "screen", "timer", "input", "output",
    "string", "number", "letter", "space", "logic"
};

void clearScreen() {
#ifdef _WIN32
    system("cls");
#else
    system("clear");
#endif
}

string getCurrentDateTime() {
    time_t now = time(0);
    char buf[80];
    strftime(buf, sizeof(buf), "%Y-%m-%d %X", localtime(&now));
    return string(buf);
}

void countdown() {
    for (int i = 3; i > 0; --i) {
        cout << "Starting in: " << i << "...\n";
        this_thread::sleep_for(seconds(1));
    }
    cout << "Go!\n\n";
    this_thread::sleep_for(seconds(1));
    clearScreen();
}

string toLowerTrim(const string& str) {
    string trimmed = str;
    trimmed.erase(trimmed.find_last_not_of(" \n\r\t") + 1);
    trimmed.erase(0, trimmed.find_first_not_of(" \n\r\t"));
    transform(trimmed.begin(), trimmed.end(), trimmed.begin(), ::tolower);
    return trimmed;
}

vector<string> getRandomWords(int count) {
    vector<string> copy = WORD_LIST;
    random_device rd;
    mt19937 g(rd());
    shuffle(copy.begin(), copy.end(), g);
    if (count > copy.size()) count = copy.size();
    return vector<string>(copy.begin(), copy.begin() + count);
}

void saveResult(const Result& r) {
    ofstream file("typing_results.txt", ios::app);
    if (!file.is_open()) {
        cout << "Error: Unable to save result.\n";
        return;
    }
    file << "Date: " << r.dateTime << "\n"
         << "Name: " << r.name << "\n"
         << "Total Words: " << r.totalWords << "\n"
         << "Correct Words: " << r.correctWords << "\n"
         << "WPM: " << r.wpm << "\n"
         << "Accuracy: " << r.accuracy << "%\n\n";
    file.close();
}

void showResult(const Result& r) {
    cout << "\n--- Results ---\n";
    cout << "Name: " << r.name << "\nTotal Words: " << r.totalWords
         << "\nCorrect Words: " << r.correctWords << "\nWPM: " << r.wpm
         << "\nAccuracy: " << r.accuracy << "%\n";
}

void typingTest() {
    clearScreen();

    string name;
    cout << "Enter your name: ";
    cin.ignore(numeric_limits<streamsize>::max(), '\n');
    getline(cin, name);

    clearScreen();
    countdown();

    int totalWords = 0, correctWords = 0;
    auto start = steady_clock::now();

    while (true) {
        auto now = steady_clock::now();
        double elapsed = duration_cast<seconds>(now - start).count();
        if (elapsed >= 30) break;

        string word = getRandomWords(1)[0];
        string input;

        cout << "[Time left: " << (30 - static_cast<int>(elapsed)) << "s]\n";
        cout << "Word: " << word << "\n> ";
        cin >> input;

        now = steady_clock::now();
        elapsed = duration_cast<seconds>(now - start).count();
        if (elapsed >= 30) break;

        totalWords++;

        if (toLowerTrim(input) == toLowerTrim(word)) {
            correctWords++;
        }

        clearScreen();
    }

    auto end = steady_clock::now();
    double totalTimeSec = duration_cast<duration<double>>(end - start).count();

    double wpm = (totalWords / totalTimeSec) * 60.0;
    double accuracy = totalWords > 0 ? (correctWords * 100.0 / totalWords) : 0;

    Result r = {name, totalWords, correctWords, wpm, accuracy, getCurrentDateTime()};
    saveResult(r);
    clearScreen();
    showResult(r);
}

void viewResults() {
    clearScreen();
    ifstream file("typing_results.txt");
    if (!file.is_open() || file.peek() == ifstream::traits_type::eof()) {
        cout << "No past results found.\n";
        return;
    }
    string line;
    while (getline(file, line)) {
        cout << line << endl;
    }
    file.close();
}

void deleteRecords() {
    clearScreen();
    char confirm;
    cout << "Are you sure you want to delete all records? (y/n): ";
    cin >> confirm;
    if (confirm == 'y' || confirm == 'Y') {
        ofstream file("typing_results.txt", ios::trunc);
        file.close();
        cout << "All records deleted.\n";
    } else {
        cout << "Operation cancelled.\n";
    }
}

void showMenu() {
    while (true) {
        clearScreen();
        cout << "\n=== Typing Speed Test System ===\n";
        cout << "[1] Start Typing Test\n";
        cout << "[2] View Past Results\n";
        cout << "[3] Delete Records\n";
        cout << "[4] Exit\n";
        cout << "Choose an option: ";

        int choice;
        cin >> choice;

        if (cin.fail()) {
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            cout << "Invalid input. Please enter a number.\n";
            this_thread::sleep_for(seconds(2));
            continue;
        }

        switch (choice) {
            case 1: typingTest(); break;
            case 2: viewResults(); break;
            case 3: deleteRecords(); break;
            case 4: cout << "Exiting program.\n"; return;
            default: cout << "Invalid option. Try again.\n"; break;
        }

        cout << "\nPress Enter to return to menu...";
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
        cin.get();
    }
}

int main() {
    srand(static_cast<unsigned int>(time(0)));
    showMenu();
    return 0;
}